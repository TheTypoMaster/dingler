// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: supersonic/proto/supersonic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "image/query/utils/supersonic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace image {

namespace {

const ::google::protobuf::Descriptor* SerializedException_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SerializedException_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReturnCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Nullability_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Aggregation_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ColumnOrder_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* JoinType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* KeyUniqueness_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_supersonic_2fproto_2fsupersonic_2eproto() {
  protobuf_AddDesc_supersonic_2fproto_2fsupersonic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "supersonic/proto/supersonic.proto");
  GOOGLE_CHECK(file != NULL);
  SerializedException_descriptor_ = file->message_type(0);
  static const int SerializedException_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedException, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedException, return_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedException, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedException, stack_trace_),
  };
  SerializedException_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SerializedException_descriptor_,
      SerializedException::default_instance_,
      SerializedException_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedException, _has_bits_[0]),
      -1,
      -1,
      sizeof(SerializedException),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerializedException, _internal_metadata_),
      -1);
  DataType_descriptor_ = file->enum_type(0);
  ReturnCode_descriptor_ = file->enum_type(1);
  Nullability_descriptor_ = file->enum_type(2);
  Aggregation_descriptor_ = file->enum_type(3);
  ColumnOrder_descriptor_ = file->enum_type(4);
  JoinType_descriptor_ = file->enum_type(5);
  KeyUniqueness_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_supersonic_2fproto_2fsupersonic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SerializedException_descriptor_, &SerializedException::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_supersonic_2fproto_2fsupersonic_2eproto() {
  delete SerializedException::default_instance_;
  delete SerializedException_reflection_;
}

void protobuf_AddDesc_supersonic_2fproto_2fsupersonic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::container::protobuf_AddDesc_supersonic_2futils_2fexception_2fstack_5ftrace_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!supersonic/proto/supersonic.proto\022\nsup"
    "ersonic\032,supersonic/utils/exception/stac"
    "k_trace.proto\"\217\001\n\023SerializedException\022\021\n"
    "\ttimestamp\030\001 \002(\003\022+\n\013return_code\030\002 \002(\0162\026."
    "supersonic.ReturnCode\022\017\n\007message\030\003 \002(\t\022\'"
    "\n\013stack_trace\030\004 \002(\0132\022.common.StackTrace*"
    "\242\001\n\010DataType\022\t\n\005INT32\020\001\022\t\n\005INT64\020\002\022\n\n\006UI"
    "NT32\020\010\022\n\n\006UINT64\020\003\022\t\n\005FLOAT\020\t\022\n\n\006DOUBLE\020"
    "\005\022\010\n\004BOOL\020\006\022\010\n\004DATE\020\n\022\014\n\010DATETIME\020\004\022\n\n\006S"
    "TRING\020\000\022\n\n\006BINARY\020\007\022\010\n\004ENUM\020\r\022\r\n\tDATA_TY"
    "PE\020\013*\230\007\n\nReturnCode\022\006\n\002OK\020\000\022\020\n\014END_OF_IN"
    "PUT\020\001\022\020\n\014BEFORE_INPUT\020\002\022\026\n\022WAITING_ON_BA"
    "RRIER\020\003\022\027\n\023ERROR_UNKNOWN_ERROR\020d\022\032\n\026ERRO"
    "R_GENERAL_IO_ERROR\020e\022\031\n\025ERROR_MEMORY_EXC"
    "EEDED\020f\022\031\n\025ERROR_NOT_IMPLEMENTED\020g\022\032\n\026ER"
    "ROR_EVALUATION_ERROR\020h\022\023\n\017ERROR_BAD_PROT"
    "O\020i\022\"\n\036ERROR_TEMP_FILE_CREATION_ERROR\020j\022"
    "\027\n\022ERROR_TOO_FEW_ROWS\020\255\002\022\030\n\023ERROR_TOO_MA"
    "NY_ROWS\020\256\002\022\032\n\025ERROR_TOO_FEW_COLUMNS\020\257\002\022\033"
    "\n\026ERROR_TOO_MANY_COLUMNS\020\260\002\022 \n\033ERROR_DUP"
    "LICATED_UNIQUE_KEY\020\261\002\022\037\n\032ERROR_GENERIC_S"
    "CHEMA_ERROR\020\220\003\022#\n\036ERROR_ATTRIBUTE_COUNT_"
    "MISMATCH\020\221\003\022\"\n\035ERROR_ATTRIBUTE_TYPE_MISM"
    "ATCH\020\222\003\022\034\n\027ERROR_ATTRIBUTE_MISSING\020\223\003\022\033\n"
    "\026ERROR_ATTRIBUTE_EXISTS\020\224\003\022 \n\033ERROR_INVA"
    "LID_ARGUMENT_TYPE\020\225\003\022 \n\033ERROR_ATTRIBUTE_"
    "IS_NULLABLE\020\226\003\022!\n\034ERROR_INVALID_ARGUMENT"
    "_VALUE\020\227\003\022\036\n\031ERROR_ATTRIBUTE_AMBIGUOUS\020\230"
    "\003\022&\n!ERROR_DUPLICATE_ENUM_VALUE_NUMBER\020\244"
    "\003\022$\n\037ERROR_DUPLICATE_ENUM_VALUE_NAME\020\245\003\022"
    "&\n!ERROR_UNDEFINED_ENUM_VALUE_NUMBER\020\246\003\022"
    "$\n\037ERROR_UNDEFINED_ENUM_VALUE_NAME\020\247\003\022\036\n"
    "\031ERROR_FOREIGN_KEY_INVALID\020\365\003\022\020\n\013INTERRU"
    "PTED\020\350\007*-\n\013Nullability\022\020\n\014NOT_NULLABLE\020\000"
    "\022\014\n\010NULLABLE\020\001*T\n\013Aggregation\022\007\n\003SUM\020\000\022\007"
    "\n\003MIN\020\001\022\007\n\003MAX\020\002\022\t\n\005COUNT\020\003\022\n\n\006CONCAT\020\004\022"
    "\t\n\005FIRST\020\005\022\010\n\004LAST\020\006*,\n\013ColumnOrder\022\r\n\tA"
    "SCENDING\020\000\022\016\n\nDESCENDING\020\001*F\n\010JoinType\022\t"
    "\n\005INNER\020\000\022\016\n\nLEFT_OUTER\020\001\022\017\n\013RIGHT_OUTER"
    "\020\002\022\016\n\nFULL_OUTER\020\003*+\n\rKeyUniqueness\022\016\n\nN"
    "OT_UNIQUE\020\000\022\n\n\006UNIQUE\020\001B8\n)com.google.da"
    "tawarehouse.supersonic.protoB\013CommonEnum"
    "s", 1681);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "supersonic/proto/supersonic.proto", &protobuf_RegisterTypes);
  SerializedException::default_instance_ = new SerializedException();
  SerializedException::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_supersonic_2fproto_2fsupersonic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_supersonic_2fproto_2fsupersonic_2eproto {
  StaticDescriptorInitializer_supersonic_2fproto_2fsupersonic_2eproto() {
    protobuf_AddDesc_supersonic_2fproto_2fsupersonic_2eproto();
  }
} static_descriptor_initializer_supersonic_2fproto_2fsupersonic_2eproto_;
const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataType_descriptor_;
}
bool DataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReturnCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnCode_descriptor_;
}
bool ReturnCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 400:
    case 401:
    case 402:
    case 403:
    case 404:
    case 405:
    case 406:
    case 407:
    case 408:
    case 420:
    case 421:
    case 422:
    case 423:
    case 501:
    case 1000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Nullability_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Nullability_descriptor_;
}
bool Nullability_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Aggregation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Aggregation_descriptor_;
}
bool Aggregation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ColumnOrder_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnOrder_descriptor_;
}
bool ColumnOrder_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JoinType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinType_descriptor_;
}
bool JoinType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* KeyUniqueness_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyUniqueness_descriptor_;
}
bool KeyUniqueness_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int SerializedException::kTimestampFieldNumber;
const int SerializedException::kReturnCodeFieldNumber;
const int SerializedException::kMessageFieldNumber;
const int SerializedException::kStackTraceFieldNumber;
#endif  // !_MSC_VER

SerializedException::SerializedException()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:supersonic.SerializedException)
}

void SerializedException::InitAsDefaultInstance() {
  stack_trace_ = const_cast< ::container::StackTrace*>(&::container::StackTrace::default_instance());
}

SerializedException::SerializedException(const SerializedException& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:supersonic.SerializedException)
}

void SerializedException::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  return_code_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stack_trace_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SerializedException::~SerializedException() {
  // @@protoc_insertion_point(destructor:supersonic.SerializedException)
  SharedDtor();
}

void SerializedException::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete stack_trace_;
  }
}

void SerializedException::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerializedException::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SerializedException_descriptor_;
}

const SerializedException& SerializedException::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_supersonic_2fproto_2fsupersonic_2eproto();
  return *default_instance_;
}

SerializedException* SerializedException::default_instance_ = NULL;

SerializedException* SerializedException::New(::google::protobuf::Arena* arena) const {
  SerializedException* n = new SerializedException;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerializedException::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    timestamp_ = GOOGLE_LONGLONG(0);
    return_code_ = 0;
    if (has_message()) {
      message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_stack_trace()) {
      if (stack_trace_ != NULL) stack_trace_->::container::StackTrace::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SerializedException::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:supersonic.SerializedException)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_return_code;
        break;
      }

      // required .supersonic.ReturnCode return_code = 2;
      case 2: {
        if (tag == 16) {
         parse_return_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::container::ReturnCode_IsValid(value)) {
            set_return_code(static_cast< ::container::ReturnCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // required string message = 3;
      case 3: {
        if (tag == 26) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "supersonic.SerializedException.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_stack_trace;
        break;
      }

      // required .common.StackTrace stack_trace = 4;
      case 4: {
        if (tag == 34) {
         parse_stack_trace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stack_trace()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:supersonic.SerializedException)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:supersonic.SerializedException)
  return false;
#undef DO_
}

void SerializedException::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:supersonic.SerializedException)
  // required int64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // required .supersonic.ReturnCode return_code = 2;
  if (has_return_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->return_code(), output);
  }

  // required string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "supersonic.SerializedException.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  // required .common.StackTrace stack_trace = 4;
  if (has_stack_trace()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->stack_trace_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:supersonic.SerializedException)
}

::google::protobuf::uint8* SerializedException::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:supersonic.SerializedException)
  // required int64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // required .supersonic.ReturnCode return_code = 2;
  if (has_return_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->return_code(), target);
  }

  // required string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "supersonic.SerializedException.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  // required .common.StackTrace stack_trace = 4;
  if (has_stack_trace()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->stack_trace_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:supersonic.SerializedException)
  return target;
}

int SerializedException::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_timestamp()) {
    // required int64 timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  if (has_return_code()) {
    // required .supersonic.ReturnCode return_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->return_code());
  }

  if (has_message()) {
    // required string message = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  if (has_stack_trace()) {
    // required .common.StackTrace stack_trace = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stack_trace_);
  }

  return total_size;
}
int SerializedException::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int64 timestamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());

    // required .supersonic.ReturnCode return_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->return_code());

    // required string message = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());

    // required .common.StackTrace stack_trace = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stack_trace_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerializedException::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SerializedException* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SerializedException*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SerializedException::MergeFrom(const SerializedException& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_return_code()) {
      set_return_code(from.return_code());
    }
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (from.has_stack_trace()) {
      mutable_stack_trace()->::container::StackTrace::MergeFrom(from.stack_trace());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SerializedException::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerializedException::CopyFrom(const SerializedException& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedException::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SerializedException::Swap(SerializedException* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerializedException::InternalSwap(SerializedException* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(return_code_, other->return_code_);
  message_.Swap(&other->message_);
  std::swap(stack_trace_, other->stack_trace_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerializedException::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SerializedException_descriptor_;
  metadata.reflection = SerializedException_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerializedException

// required int64 timestamp = 1;
 bool SerializedException::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void SerializedException::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
 void SerializedException::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
 void SerializedException::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
 ::google::protobuf::int64 SerializedException::timestamp() const {
  // @@protoc_insertion_point(field_get:supersonic.SerializedException.timestamp)
  return timestamp_;
}
 void SerializedException::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:supersonic.SerializedException.timestamp)
}

// required .supersonic.ReturnCode return_code = 2;
 bool SerializedException::has_return_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void SerializedException::set_has_return_code() {
  _has_bits_[0] |= 0x00000002u;
}
 void SerializedException::clear_has_return_code() {
  _has_bits_[0] &= ~0x00000002u;
}
 void SerializedException::clear_return_code() {
  return_code_ = 0;
  clear_has_return_code();
}
 ::container::ReturnCode SerializedException::return_code() const {
  // @@protoc_insertion_point(field_get:supersonic.SerializedException.return_code)
  return static_cast< ::container::ReturnCode >(return_code_);
}
 void SerializedException::set_return_code(::container::ReturnCode value) {
  assert(::container::ReturnCode_IsValid(value));
  set_has_return_code();
  return_code_ = value;
  // @@protoc_insertion_point(field_set:supersonic.SerializedException.return_code)
}

// required string message = 3;
 bool SerializedException::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void SerializedException::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
 void SerializedException::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
 void SerializedException::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& SerializedException::message() const {
  // @@protoc_insertion_point(field_get:supersonic.SerializedException.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SerializedException::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:supersonic.SerializedException.message)
}
 void SerializedException::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:supersonic.SerializedException.message)
}
 void SerializedException::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:supersonic.SerializedException.message)
}
 ::std::string* SerializedException::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:supersonic.SerializedException.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SerializedException::release_message() {
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SerializedException::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:supersonic.SerializedException.message)
}

// required .common.StackTrace stack_trace = 4;
 bool SerializedException::has_stack_trace() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
 void SerializedException::set_has_stack_trace() {
  _has_bits_[0] |= 0x00000008u;
}
 void SerializedException::clear_has_stack_trace() {
  _has_bits_[0] &= ~0x00000008u;
}
 void SerializedException::clear_stack_trace() {
  if (stack_trace_ != NULL) stack_trace_->::container::StackTrace::Clear();
  clear_has_stack_trace();
}
 const ::container::StackTrace& SerializedException::stack_trace() const {
  // @@protoc_insertion_point(field_get:supersonic.SerializedException.stack_trace)
  return stack_trace_ != NULL ? *stack_trace_ : *default_instance_->stack_trace_;
}
 ::container::StackTrace* SerializedException::mutable_stack_trace() {
  set_has_stack_trace();
  if (stack_trace_ == NULL) {
    stack_trace_ = new ::container::StackTrace;
  }
  // @@protoc_insertion_point(field_mutable:supersonic.SerializedException.stack_trace)
  return stack_trace_;
}
 ::container::StackTrace* SerializedException::release_stack_trace() {
  clear_has_stack_trace();
  ::container::StackTrace* temp = stack_trace_;
  stack_trace_ = NULL;
  return temp;
}
 void SerializedException::set_allocated_stack_trace(::container::StackTrace* stack_trace) {
  delete stack_trace_;
  stack_trace_ = stack_trace;
  if (stack_trace) {
    set_has_stack_trace();
  } else {
    clear_has_stack_trace();
  }
  // @@protoc_insertion_point(field_set_allocated:supersonic.SerializedException.stack_trace)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace image

// @@protoc_insertion_point(global_scope)
