// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: supersonic/proto/specification.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "image/query/utils/specification.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace image {

namespace {

const ::google::protobuf::Descriptor* ExtendedSortSpecification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtendedSortSpecification_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtendedSortSpecification_Key_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtendedSortSpecification_Key_reflection_ = NULL;
const ::google::protobuf::Descriptor* Distinctness_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Distinctness_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_supersonic_2fproto_2fspecification_2eproto() {
  protobuf_AddDesc_supersonic_2fproto_2fspecification_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "supersonic/proto/specification.proto");
  GOOGLE_CHECK(file != NULL);
  ExtendedSortSpecification_descriptor_ = file->message_type(0);
  static const int ExtendedSortSpecification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSortSpecification, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSortSpecification, limit_),
  };
  ExtendedSortSpecification_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExtendedSortSpecification_descriptor_,
      ExtendedSortSpecification::default_instance_,
      ExtendedSortSpecification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSortSpecification, _has_bits_[0]),
      -1,
      -1,
      sizeof(ExtendedSortSpecification),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSortSpecification, _internal_metadata_),
      -1);
  ExtendedSortSpecification_Key_descriptor_ = ExtendedSortSpecification_descriptor_->nested_type(0);
  static const int ExtendedSortSpecification_Key_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSortSpecification_Key, attribute_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSortSpecification_Key, column_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSortSpecification_Key, case_sensitive_),
  };
  ExtendedSortSpecification_Key_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ExtendedSortSpecification_Key_descriptor_,
      ExtendedSortSpecification_Key::default_instance_,
      ExtendedSortSpecification_Key_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSortSpecification_Key, _has_bits_[0]),
      -1,
      -1,
      sizeof(ExtendedSortSpecification_Key),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtendedSortSpecification_Key, _internal_metadata_),
      -1);
  Distinctness_descriptor_ = file->message_type(1);
  static const int Distinctness_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distinctness, is_not_distinct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distinctness, is_exact_distinct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distinctness, estimated_distinct_threshold_),
  };
  Distinctness_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Distinctness_descriptor_,
      Distinctness::default_instance_,
      Distinctness_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distinctness, _has_bits_[0]),
      -1,
      -1,
      sizeof(Distinctness),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Distinctness, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_supersonic_2fproto_2fspecification_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExtendedSortSpecification_descriptor_, &ExtendedSortSpecification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ExtendedSortSpecification_Key_descriptor_, &ExtendedSortSpecification_Key::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Distinctness_descriptor_, &Distinctness::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_supersonic_2fproto_2fspecification_2eproto() {
  delete ExtendedSortSpecification::default_instance_;
  delete ExtendedSortSpecification_reflection_;
  delete ExtendedSortSpecification_Key::default_instance_;
  delete ExtendedSortSpecification_Key_reflection_;
  delete Distinctness::default_instance_;
  delete Distinctness_reflection_;
}

void protobuf_AddDesc_supersonic_2fproto_2fspecification_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::container::protobuf_AddDesc_supersonic_2fproto_2fsupersonic_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$supersonic/proto/specification.proto\022\n"
    "supersonic\032!supersonic/proto/supersonic."
    "proto\"\311\001\n\031ExtendedSortSpecification\0227\n\004k"
    "eys\030\001 \003(\0132).supersonic.ExtendedSortSpeci"
    "fication.Key\022\r\n\005limit\030\002 \001(\004\032d\n\003Key\022\026\n\016at"
    "tribute_name\030\001 \002(\t\022-\n\014column_order\030\002 \002(\016"
    "2\027.supersonic.ColumnOrder\022\026\n\016case_sensit"
    "ive\030\003 \001(\010\"h\n\014Distinctness\022\027\n\017is_not_dist"
    "inct\030\001 \001(\010\022\031\n\021is_exact_distinct\030\002 \001(\010\022$\n"
    "\034estimated_distinct_threshold\030\003 \001(\005", 395);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "supersonic/proto/specification.proto", &protobuf_RegisterTypes);
  ExtendedSortSpecification::default_instance_ = new ExtendedSortSpecification();
  ExtendedSortSpecification_Key::default_instance_ = new ExtendedSortSpecification_Key();
  Distinctness::default_instance_ = new Distinctness();
  ExtendedSortSpecification::default_instance_->InitAsDefaultInstance();
  ExtendedSortSpecification_Key::default_instance_->InitAsDefaultInstance();
  Distinctness::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_supersonic_2fproto_2fspecification_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_supersonic_2fproto_2fspecification_2eproto {
  StaticDescriptorInitializer_supersonic_2fproto_2fspecification_2eproto() {
    protobuf_AddDesc_supersonic_2fproto_2fspecification_2eproto();
  }
} static_descriptor_initializer_supersonic_2fproto_2fspecification_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int ExtendedSortSpecification_Key::kAttributeNameFieldNumber;
const int ExtendedSortSpecification_Key::kColumnOrderFieldNumber;
const int ExtendedSortSpecification_Key::kCaseSensitiveFieldNumber;
#endif  // !_MSC_VER

ExtendedSortSpecification_Key::ExtendedSortSpecification_Key()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:supersonic.ExtendedSortSpecification.Key)
}

void ExtendedSortSpecification_Key::InitAsDefaultInstance() {
}

ExtendedSortSpecification_Key::ExtendedSortSpecification_Key(const ExtendedSortSpecification_Key& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:supersonic.ExtendedSortSpecification.Key)
}

void ExtendedSortSpecification_Key::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  attribute_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  column_order_ = 0;
  case_sensitive_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtendedSortSpecification_Key::~ExtendedSortSpecification_Key() {
  // @@protoc_insertion_point(destructor:supersonic.ExtendedSortSpecification.Key)
  SharedDtor();
}

void ExtendedSortSpecification_Key::SharedDtor() {
  attribute_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ExtendedSortSpecification_Key::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtendedSortSpecification_Key::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtendedSortSpecification_Key_descriptor_;
}

const ExtendedSortSpecification_Key& ExtendedSortSpecification_Key::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_supersonic_2fproto_2fspecification_2eproto();
  return *default_instance_;
}

ExtendedSortSpecification_Key* ExtendedSortSpecification_Key::default_instance_ = NULL;

ExtendedSortSpecification_Key* ExtendedSortSpecification_Key::New(::google::protobuf::Arena* arena) const {
  ExtendedSortSpecification_Key* n = new ExtendedSortSpecification_Key;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExtendedSortSpecification_Key::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ExtendedSortSpecification_Key*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(column_order_, case_sensitive_);
    if (has_attribute_name()) {
      attribute_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ExtendedSortSpecification_Key::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:supersonic.ExtendedSortSpecification.Key)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string attribute_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attribute_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attribute_name().data(), this->attribute_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "supersonic.ExtendedSortSpecification.Key.attribute_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_column_order;
        break;
      }

      // required .supersonic.ColumnOrder column_order = 2;
      case 2: {
        if (tag == 16) {
         parse_column_order:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::container::ColumnOrder_IsValid(value)) {
            set_column_order(static_cast< ::container::ColumnOrder >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_case_sensitive;
        break;
      }

      // optional bool case_sensitive = 3;
      case 3: {
        if (tag == 24) {
         parse_case_sensitive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &case_sensitive_)));
          set_has_case_sensitive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:supersonic.ExtendedSortSpecification.Key)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:supersonic.ExtendedSortSpecification.Key)
  return false;
#undef DO_
}

void ExtendedSortSpecification_Key::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:supersonic.ExtendedSortSpecification.Key)
  // required string attribute_name = 1;
  if (has_attribute_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attribute_name().data(), this->attribute_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "supersonic.ExtendedSortSpecification.Key.attribute_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->attribute_name(), output);
  }

  // required .supersonic.ColumnOrder column_order = 2;
  if (has_column_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->column_order(), output);
  }

  // optional bool case_sensitive = 3;
  if (has_case_sensitive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->case_sensitive(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:supersonic.ExtendedSortSpecification.Key)
}

::google::protobuf::uint8* ExtendedSortSpecification_Key::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:supersonic.ExtendedSortSpecification.Key)
  // required string attribute_name = 1;
  if (has_attribute_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attribute_name().data(), this->attribute_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "supersonic.ExtendedSortSpecification.Key.attribute_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->attribute_name(), target);
  }

  // required .supersonic.ColumnOrder column_order = 2;
  if (has_column_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->column_order(), target);
  }

  // optional bool case_sensitive = 3;
  if (has_case_sensitive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->case_sensitive(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:supersonic.ExtendedSortSpecification.Key)
  return target;
}

int ExtendedSortSpecification_Key::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_attribute_name()) {
    // required string attribute_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->attribute_name());
  }

  if (has_column_order()) {
    // required .supersonic.ColumnOrder column_order = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->column_order());
  }

  return total_size;
}
int ExtendedSortSpecification_Key::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string attribute_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->attribute_name());

    // required .supersonic.ColumnOrder column_order = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->column_order());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool case_sensitive = 3;
  if (has_case_sensitive()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtendedSortSpecification_Key::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExtendedSortSpecification_Key* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtendedSortSpecification_Key*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtendedSortSpecification_Key::MergeFrom(const ExtendedSortSpecification_Key& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attribute_name()) {
      set_has_attribute_name();
      attribute_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.attribute_name_);
    }
    if (from.has_column_order()) {
      set_column_order(from.column_order());
    }
    if (from.has_case_sensitive()) {
      set_case_sensitive(from.case_sensitive());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ExtendedSortSpecification_Key::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtendedSortSpecification_Key::CopyFrom(const ExtendedSortSpecification_Key& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtendedSortSpecification_Key::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ExtendedSortSpecification_Key::Swap(ExtendedSortSpecification_Key* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExtendedSortSpecification_Key::InternalSwap(ExtendedSortSpecification_Key* other) {
  attribute_name_.Swap(&other->attribute_name_);
  std::swap(column_order_, other->column_order_);
  std::swap(case_sensitive_, other->case_sensitive_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExtendedSortSpecification_Key::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtendedSortSpecification_Key_descriptor_;
  metadata.reflection = ExtendedSortSpecification_Key_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ExtendedSortSpecification::kKeysFieldNumber;
const int ExtendedSortSpecification::kLimitFieldNumber;
#endif  // !_MSC_VER

ExtendedSortSpecification::ExtendedSortSpecification()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:supersonic.ExtendedSortSpecification)
}

void ExtendedSortSpecification::InitAsDefaultInstance() {
}

ExtendedSortSpecification::ExtendedSortSpecification(const ExtendedSortSpecification& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:supersonic.ExtendedSortSpecification)
}

void ExtendedSortSpecification::SharedCtor() {
  _cached_size_ = 0;
  limit_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtendedSortSpecification::~ExtendedSortSpecification() {
  // @@protoc_insertion_point(destructor:supersonic.ExtendedSortSpecification)
  SharedDtor();
}

void ExtendedSortSpecification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExtendedSortSpecification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtendedSortSpecification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtendedSortSpecification_descriptor_;
}

const ExtendedSortSpecification& ExtendedSortSpecification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_supersonic_2fproto_2fspecification_2eproto();
  return *default_instance_;
}

ExtendedSortSpecification* ExtendedSortSpecification::default_instance_ = NULL;

ExtendedSortSpecification* ExtendedSortSpecification::New(::google::protobuf::Arena* arena) const {
  ExtendedSortSpecification* n = new ExtendedSortSpecification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExtendedSortSpecification::Clear() {
  limit_ = GOOGLE_ULONGLONG(0);
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ExtendedSortSpecification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:supersonic.ExtendedSortSpecification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .supersonic.ExtendedSortSpecification.Key keys = 1;
      case 1: {
        if (tag == 10) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_keys;
        if (input->ExpectTag(16)) goto parse_limit;
        break;
      }

      // optional uint64 limit = 2;
      case 2: {
        if (tag == 16) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:supersonic.ExtendedSortSpecification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:supersonic.ExtendedSortSpecification)
  return false;
#undef DO_
}

void ExtendedSortSpecification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:supersonic.ExtendedSortSpecification)
  // repeated .supersonic.ExtendedSortSpecification.Key keys = 1;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keys(i), output);
  }

  // optional uint64 limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:supersonic.ExtendedSortSpecification)
}

::google::protobuf::uint8* ExtendedSortSpecification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:supersonic.ExtendedSortSpecification)
  // repeated .supersonic.ExtendedSortSpecification.Key keys = 1;
  for (unsigned int i = 0, n = this->keys_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->keys(i), target);
  }

  // optional uint64 limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:supersonic.ExtendedSortSpecification)
  return target;
}

int ExtendedSortSpecification::ByteSize() const {
  int total_size = 0;

  // optional uint64 limit = 2;
  if (has_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->limit());
  }

  // repeated .supersonic.ExtendedSortSpecification.Key keys = 1;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keys(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtendedSortSpecification::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ExtendedSortSpecification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtendedSortSpecification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtendedSortSpecification::MergeFrom(const ExtendedSortSpecification& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ExtendedSortSpecification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtendedSortSpecification::CopyFrom(const ExtendedSortSpecification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtendedSortSpecification::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->keys())) return false;
  return true;
}

void ExtendedSortSpecification::Swap(ExtendedSortSpecification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExtendedSortSpecification::InternalSwap(ExtendedSortSpecification* other) {
  keys_.UnsafeArenaSwap(&other->keys_);
  std::swap(limit_, other->limit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExtendedSortSpecification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtendedSortSpecification_descriptor_;
  metadata.reflection = ExtendedSortSpecification_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ExtendedSortSpecification_Key

// required string attribute_name = 1;
 bool ExtendedSortSpecification_Key::has_attribute_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void ExtendedSortSpecification_Key::set_has_attribute_name() {
  _has_bits_[0] |= 0x00000001u;
}
 void ExtendedSortSpecification_Key::clear_has_attribute_name() {
  _has_bits_[0] &= ~0x00000001u;
}
 void ExtendedSortSpecification_Key::clear_attribute_name() {
  attribute_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_attribute_name();
}
 const ::std::string& ExtendedSortSpecification_Key::attribute_name() const {
  // @@protoc_insertion_point(field_get:supersonic.ExtendedSortSpecification.Key.attribute_name)
  return attribute_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExtendedSortSpecification_Key::set_attribute_name(const ::std::string& value) {
  set_has_attribute_name();
  attribute_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:supersonic.ExtendedSortSpecification.Key.attribute_name)
}
 void ExtendedSortSpecification_Key::set_attribute_name(const char* value) {
  set_has_attribute_name();
  attribute_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:supersonic.ExtendedSortSpecification.Key.attribute_name)
}
 void ExtendedSortSpecification_Key::set_attribute_name(const char* value, size_t size) {
  set_has_attribute_name();
  attribute_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:supersonic.ExtendedSortSpecification.Key.attribute_name)
}
 ::std::string* ExtendedSortSpecification_Key::mutable_attribute_name() {
  set_has_attribute_name();
  // @@protoc_insertion_point(field_mutable:supersonic.ExtendedSortSpecification.Key.attribute_name)
  return attribute_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ExtendedSortSpecification_Key::release_attribute_name() {
  clear_has_attribute_name();
  return attribute_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ExtendedSortSpecification_Key::set_allocated_attribute_name(::std::string* attribute_name) {
  if (attribute_name != NULL) {
    set_has_attribute_name();
  } else {
    clear_has_attribute_name();
  }
  attribute_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), attribute_name);
  // @@protoc_insertion_point(field_set_allocated:supersonic.ExtendedSortSpecification.Key.attribute_name)
}

// required .supersonic.ColumnOrder column_order = 2;
 bool ExtendedSortSpecification_Key::has_column_order() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void ExtendedSortSpecification_Key::set_has_column_order() {
  _has_bits_[0] |= 0x00000002u;
}
 void ExtendedSortSpecification_Key::clear_has_column_order() {
  _has_bits_[0] &= ~0x00000002u;
}
 void ExtendedSortSpecification_Key::clear_column_order() {
  column_order_ = 0;
  clear_has_column_order();
}
 ::container::ColumnOrder ExtendedSortSpecification_Key::column_order() const {
  // @@protoc_insertion_point(field_get:supersonic.ExtendedSortSpecification.Key.column_order)
  return static_cast< ::container::ColumnOrder >(column_order_);
}
 void ExtendedSortSpecification_Key::set_column_order(::container::ColumnOrder value) {
  assert(::container::ColumnOrder_IsValid(value));
  set_has_column_order();
  column_order_ = value;
  // @@protoc_insertion_point(field_set:supersonic.ExtendedSortSpecification.Key.column_order)
}

// optional bool case_sensitive = 3;
 bool ExtendedSortSpecification_Key::has_case_sensitive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void ExtendedSortSpecification_Key::set_has_case_sensitive() {
  _has_bits_[0] |= 0x00000004u;
}
 void ExtendedSortSpecification_Key::clear_has_case_sensitive() {
  _has_bits_[0] &= ~0x00000004u;
}
 void ExtendedSortSpecification_Key::clear_case_sensitive() {
  case_sensitive_ = false;
  clear_has_case_sensitive();
}
 bool ExtendedSortSpecification_Key::case_sensitive() const {
  // @@protoc_insertion_point(field_get:supersonic.ExtendedSortSpecification.Key.case_sensitive)
  return case_sensitive_;
}
 void ExtendedSortSpecification_Key::set_case_sensitive(bool value) {
  set_has_case_sensitive();
  case_sensitive_ = value;
  // @@protoc_insertion_point(field_set:supersonic.ExtendedSortSpecification.Key.case_sensitive)
}

// -------------------------------------------------------------------

// ExtendedSortSpecification

// repeated .supersonic.ExtendedSortSpecification.Key keys = 1;
 int ExtendedSortSpecification::keys_size() const {
  return keys_.size();
}
 void ExtendedSortSpecification::clear_keys() {
  keys_.Clear();
}
 const ::container::ExtendedSortSpecification_Key& ExtendedSortSpecification::keys(int index) const {
  // @@protoc_insertion_point(field_get:supersonic.ExtendedSortSpecification.keys)
  return keys_.Get(index);
}
 ::container::ExtendedSortSpecification_Key* ExtendedSortSpecification::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:supersonic.ExtendedSortSpecification.keys)
  return keys_.Mutable(index);
}
 ::container::ExtendedSortSpecification_Key* ExtendedSortSpecification::add_keys() {
  // @@protoc_insertion_point(field_add:supersonic.ExtendedSortSpecification.keys)
  return keys_.Add();
}
 const ::google::protobuf::RepeatedPtrField< ::container::ExtendedSortSpecification_Key >&
ExtendedSortSpecification::keys() const {
  // @@protoc_insertion_point(field_list:supersonic.ExtendedSortSpecification.keys)
  return keys_;
}
 ::google::protobuf::RepeatedPtrField< ::container::ExtendedSortSpecification_Key >*
ExtendedSortSpecification::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:supersonic.ExtendedSortSpecification.keys)
  return &keys_;
}

// optional uint64 limit = 2;
 bool ExtendedSortSpecification::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void ExtendedSortSpecification::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
 void ExtendedSortSpecification::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
 void ExtendedSortSpecification::clear_limit() {
  limit_ = GOOGLE_ULONGLONG(0);
  clear_has_limit();
}
 ::google::protobuf::uint64 ExtendedSortSpecification::limit() const {
  // @@protoc_insertion_point(field_get:supersonic.ExtendedSortSpecification.limit)
  return limit_;
}
 void ExtendedSortSpecification::set_limit(::google::protobuf::uint64 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:supersonic.ExtendedSortSpecification.limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Distinctness::kIsNotDistinctFieldNumber;
const int Distinctness::kIsExactDistinctFieldNumber;
const int Distinctness::kEstimatedDistinctThresholdFieldNumber;
#endif  // !_MSC_VER

Distinctness::Distinctness()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:supersonic.Distinctness)
}

void Distinctness::InitAsDefaultInstance() {
}

Distinctness::Distinctness(const Distinctness& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:supersonic.Distinctness)
}

void Distinctness::SharedCtor() {
  _cached_size_ = 0;
  is_not_distinct_ = false;
  is_exact_distinct_ = false;
  estimated_distinct_threshold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Distinctness::~Distinctness() {
  // @@protoc_insertion_point(destructor:supersonic.Distinctness)
  SharedDtor();
}

void Distinctness::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Distinctness::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Distinctness::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Distinctness_descriptor_;
}

const Distinctness& Distinctness::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_supersonic_2fproto_2fspecification_2eproto();
  return *default_instance_;
}

Distinctness* Distinctness::default_instance_ = NULL;

Distinctness* Distinctness::New(::google::protobuf::Arena* arena) const {
  Distinctness* n = new Distinctness;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Distinctness::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Distinctness*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(is_not_distinct_, estimated_distinct_threshold_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Distinctness::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:supersonic.Distinctness)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_not_distinct = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_not_distinct_)));
          set_has_is_not_distinct();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_exact_distinct;
        break;
      }

      // optional bool is_exact_distinct = 2;
      case 2: {
        if (tag == 16) {
         parse_is_exact_distinct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_exact_distinct_)));
          set_has_is_exact_distinct();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_estimated_distinct_threshold;
        break;
      }

      // optional int32 estimated_distinct_threshold = 3;
      case 3: {
        if (tag == 24) {
         parse_estimated_distinct_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &estimated_distinct_threshold_)));
          set_has_estimated_distinct_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:supersonic.Distinctness)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:supersonic.Distinctness)
  return false;
#undef DO_
}

void Distinctness::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:supersonic.Distinctness)
  // optional bool is_not_distinct = 1;
  if (has_is_not_distinct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_not_distinct(), output);
  }

  // optional bool is_exact_distinct = 2;
  if (has_is_exact_distinct()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_exact_distinct(), output);
  }

  // optional int32 estimated_distinct_threshold = 3;
  if (has_estimated_distinct_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->estimated_distinct_threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:supersonic.Distinctness)
}

::google::protobuf::uint8* Distinctness::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:supersonic.Distinctness)
  // optional bool is_not_distinct = 1;
  if (has_is_not_distinct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_not_distinct(), target);
  }

  // optional bool is_exact_distinct = 2;
  if (has_is_exact_distinct()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_exact_distinct(), target);
  }

  // optional int32 estimated_distinct_threshold = 3;
  if (has_estimated_distinct_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->estimated_distinct_threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:supersonic.Distinctness)
  return target;
}

int Distinctness::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7) {
    // optional bool is_not_distinct = 1;
    if (has_is_not_distinct()) {
      total_size += 1 + 1;
    }

    // optional bool is_exact_distinct = 2;
    if (has_is_exact_distinct()) {
      total_size += 1 + 1;
    }

    // optional int32 estimated_distinct_threshold = 3;
    if (has_estimated_distinct_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->estimated_distinct_threshold());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Distinctness::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Distinctness* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Distinctness*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Distinctness::MergeFrom(const Distinctness& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_not_distinct()) {
      set_is_not_distinct(from.is_not_distinct());
    }
    if (from.has_is_exact_distinct()) {
      set_is_exact_distinct(from.is_exact_distinct());
    }
    if (from.has_estimated_distinct_threshold()) {
      set_estimated_distinct_threshold(from.estimated_distinct_threshold());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Distinctness::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Distinctness::CopyFrom(const Distinctness& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distinctness::IsInitialized() const {

  return true;
}

void Distinctness::Swap(Distinctness* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Distinctness::InternalSwap(Distinctness* other) {
  std::swap(is_not_distinct_, other->is_not_distinct_);
  std::swap(is_exact_distinct_, other->is_exact_distinct_);
  std::swap(estimated_distinct_threshold_, other->estimated_distinct_threshold_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Distinctness::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Distinctness_descriptor_;
  metadata.reflection = Distinctness_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Distinctness

// optional bool is_not_distinct = 1;
 bool Distinctness::has_is_not_distinct() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
 void Distinctness::set_has_is_not_distinct() {
  _has_bits_[0] |= 0x00000001u;
}
 void Distinctness::clear_has_is_not_distinct() {
  _has_bits_[0] &= ~0x00000001u;
}
 void Distinctness::clear_is_not_distinct() {
  is_not_distinct_ = false;
  clear_has_is_not_distinct();
}
 bool Distinctness::is_not_distinct() const {
  // @@protoc_insertion_point(field_get:supersonic.Distinctness.is_not_distinct)
  return is_not_distinct_;
}
 void Distinctness::set_is_not_distinct(bool value) {
  set_has_is_not_distinct();
  is_not_distinct_ = value;
  // @@protoc_insertion_point(field_set:supersonic.Distinctness.is_not_distinct)
}

// optional bool is_exact_distinct = 2;
 bool Distinctness::has_is_exact_distinct() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
 void Distinctness::set_has_is_exact_distinct() {
  _has_bits_[0] |= 0x00000002u;
}
 void Distinctness::clear_has_is_exact_distinct() {
  _has_bits_[0] &= ~0x00000002u;
}
 void Distinctness::clear_is_exact_distinct() {
  is_exact_distinct_ = false;
  clear_has_is_exact_distinct();
}
 bool Distinctness::is_exact_distinct() const {
  // @@protoc_insertion_point(field_get:supersonic.Distinctness.is_exact_distinct)
  return is_exact_distinct_;
}
 void Distinctness::set_is_exact_distinct(bool value) {
  set_has_is_exact_distinct();
  is_exact_distinct_ = value;
  // @@protoc_insertion_point(field_set:supersonic.Distinctness.is_exact_distinct)
}

// optional int32 estimated_distinct_threshold = 3;
 bool Distinctness::has_estimated_distinct_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
 void Distinctness::set_has_estimated_distinct_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
 void Distinctness::clear_has_estimated_distinct_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
 void Distinctness::clear_estimated_distinct_threshold() {
  estimated_distinct_threshold_ = 0;
  clear_has_estimated_distinct_threshold();
}
 ::google::protobuf::int32 Distinctness::estimated_distinct_threshold() const {
  // @@protoc_insertion_point(field_get:supersonic.Distinctness.estimated_distinct_threshold)
  return estimated_distinct_threshold_;
}
 void Distinctness::set_estimated_distinct_threshold(::google::protobuf::int32 value) {
  set_has_estimated_distinct_threshold();
  estimated_distinct_threshold_ = value;
  // @@protoc_insertion_point(field_set:supersonic.Distinctness.estimated_distinct_threshold)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace image

// @@protoc_insertion_point(global_scope)
