// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: supersonic/utils/exception/stack_trace.proto

#ifndef PROTOBUF_supersonic_2futils_2fexception_2fstack_5ftrace_2eproto__INCLUDED
#define PROTOBUF_supersonic_2futils_2fexception_2fstack_5ftrace_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace image {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_supersonic_2futils_2fexception_2fstack_5ftrace_2eproto();
void protobuf_AssignDesc_supersonic_2futils_2fexception_2fstack_5ftrace_2eproto();
void protobuf_ShutdownFile_supersonic_2futils_2fexception_2fstack_5ftrace_2eproto();

class StackTrace;
class StackTrace_Element;

// ===================================================================

class StackTrace_Element : public ::google::protobuf::Message {
 public:
  StackTrace_Element();
  virtual ~StackTrace_Element();

  StackTrace_Element(const StackTrace_Element& from);

  inline StackTrace_Element& operator=(const StackTrace_Element& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StackTrace_Element& default_instance();

  void Swap(StackTrace_Element* other);

  // implements Message ----------------------------------------------

  inline StackTrace_Element* New() const { return New(NULL); }

  StackTrace_Element* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StackTrace_Element& from);
  void MergeFrom(const StackTrace_Element& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StackTrace_Element* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string function = 1;
  bool has_function() const;
  void clear_function();
  static const int kFunctionFieldNumber = 1;
  const ::std::string& function() const;
  void set_function(const ::std::string& value);
  void set_function(const char* value);
  void set_function(const char* value, size_t size);
  ::std::string* mutable_function();
  ::std::string* release_function();
  void set_allocated_function(::std::string* function);

  // optional string filename = 2;
  bool has_filename() const;
  void clear_filename();
  static const int kFilenameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // optional int32 line = 3 [default = -1];
  bool has_line() const;
  void clear_line();
  static const int kLineFieldNumber = 3;
  ::google::protobuf::int32 line() const;
  void set_line(::google::protobuf::int32 value);

  // optional string context = 4;
  bool has_context() const;
  void clear_context();
  static const int kContextFieldNumber = 4;
  const ::std::string& context() const;
  void set_context(const ::std::string& value);
  void set_context(const char* value);
  void set_context(const char* value, size_t size);
  ::std::string* mutable_context();
  ::std::string* release_context();
  void set_allocated_context(::std::string* context);

  // @@protoc_insertion_point(class_scope:common.StackTrace.Element)
 private:
  inline void set_has_function();
  inline void clear_has_function();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_line();
  inline void clear_has_line();
  inline void set_has_context();
  inline void clear_has_context();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr function_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::internal::ArenaStringPtr context_;
  ::google::protobuf::int32 line_;
  friend void  protobuf_AddDesc_supersonic_2futils_2fexception_2fstack_5ftrace_2eproto();
  friend void protobuf_AssignDesc_supersonic_2futils_2fexception_2fstack_5ftrace_2eproto();
  friend void protobuf_ShutdownFile_supersonic_2futils_2fexception_2fstack_5ftrace_2eproto();

  void InitAsDefaultInstance();
  static StackTrace_Element* default_instance_;
};
// -------------------------------------------------------------------

class StackTrace : public ::google::protobuf::Message {
 public:
  StackTrace();
  virtual ~StackTrace();

  StackTrace(const StackTrace& from);

  inline StackTrace& operator=(const StackTrace& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StackTrace& default_instance();

  void Swap(StackTrace* other);

  // implements Message ----------------------------------------------

  inline StackTrace* New() const { return New(NULL); }

  StackTrace* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StackTrace& from);
  void MergeFrom(const StackTrace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StackTrace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef StackTrace_Element Element;

  // accessors -------------------------------------------------------

  // repeated .common.StackTrace.Element element = 1;
  int element_size() const;
  void clear_element();
  static const int kElementFieldNumber = 1;
  const ::container::StackTrace_Element& element(int index) const;
  ::container::StackTrace_Element* mutable_element(int index);
  ::container::StackTrace_Element* add_element();
  const ::google::protobuf::RepeatedPtrField< ::container::StackTrace_Element >&
      element() const;
  ::google::protobuf::RepeatedPtrField< ::container::StackTrace_Element >*
      mutable_element();

  // @@protoc_insertion_point(class_scope:common.StackTrace)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::container::StackTrace_Element > element_;
  friend void  protobuf_AddDesc_supersonic_2futils_2fexception_2fstack_5ftrace_2eproto();
  friend void protobuf_AssignDesc_supersonic_2futils_2fexception_2fstack_5ftrace_2eproto();
  friend void protobuf_ShutdownFile_supersonic_2futils_2fexception_2fstack_5ftrace_2eproto();

  void InitAsDefaultInstance();
  static StackTrace* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// StackTrace_Element

// optional string function = 1;
inline bool StackTrace_Element::has_function() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StackTrace_Element::set_has_function() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StackTrace_Element::clear_has_function() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StackTrace_Element::clear_function() {
  function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_function();
}
inline const ::std::string& StackTrace_Element::function() const {
  // @@protoc_insertion_point(field_get:common.StackTrace.Element.function)
  return function_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StackTrace_Element::set_function(const ::std::string& value) {
  set_has_function();
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.StackTrace.Element.function)
}
inline void StackTrace_Element::set_function(const char* value) {
  set_has_function();
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.StackTrace.Element.function)
}
inline void StackTrace_Element::set_function(const char* value, size_t size) {
  set_has_function();
  function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.StackTrace.Element.function)
}
inline ::std::string* StackTrace_Element::mutable_function() {
  set_has_function();
  // @@protoc_insertion_point(field_mutable:common.StackTrace.Element.function)
  return function_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StackTrace_Element::release_function() {
  clear_has_function();
  return function_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StackTrace_Element::set_allocated_function(::std::string* function) {
  if (function != NULL) {
    set_has_function();
  } else {
    clear_has_function();
  }
  function_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), function);
  // @@protoc_insertion_point(field_set_allocated:common.StackTrace.Element.function)
}

// optional string filename = 2;
inline bool StackTrace_Element::has_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StackTrace_Element::set_has_filename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StackTrace_Element::clear_has_filename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StackTrace_Element::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_filename();
}
inline const ::std::string& StackTrace_Element::filename() const {
  // @@protoc_insertion_point(field_get:common.StackTrace.Element.filename)
  return filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StackTrace_Element::set_filename(const ::std::string& value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.StackTrace.Element.filename)
}
inline void StackTrace_Element::set_filename(const char* value) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.StackTrace.Element.filename)
}
inline void StackTrace_Element::set_filename(const char* value, size_t size) {
  set_has_filename();
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.StackTrace.Element.filename)
}
inline ::std::string* StackTrace_Element::mutable_filename() {
  set_has_filename();
  // @@protoc_insertion_point(field_mutable:common.StackTrace.Element.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StackTrace_Element::release_filename() {
  clear_has_filename();
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StackTrace_Element::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    set_has_filename();
  } else {
    clear_has_filename();
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:common.StackTrace.Element.filename)
}

// optional int32 line = 3 [default = -1];
inline bool StackTrace_Element::has_line() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StackTrace_Element::set_has_line() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StackTrace_Element::clear_has_line() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StackTrace_Element::clear_line() {
  line_ = -1;
  clear_has_line();
}
inline ::google::protobuf::int32 StackTrace_Element::line() const {
  // @@protoc_insertion_point(field_get:common.StackTrace.Element.line)
  return line_;
}
inline void StackTrace_Element::set_line(::google::protobuf::int32 value) {
  set_has_line();
  line_ = value;
  // @@protoc_insertion_point(field_set:common.StackTrace.Element.line)
}

// optional string context = 4;
inline bool StackTrace_Element::has_context() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StackTrace_Element::set_has_context() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StackTrace_Element::clear_has_context() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StackTrace_Element::clear_context() {
  context_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_context();
}
inline const ::std::string& StackTrace_Element::context() const {
  // @@protoc_insertion_point(field_get:common.StackTrace.Element.context)
  return context_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StackTrace_Element::set_context(const ::std::string& value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.StackTrace.Element.context)
}
inline void StackTrace_Element::set_context(const char* value) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.StackTrace.Element.context)
}
inline void StackTrace_Element::set_context(const char* value, size_t size) {
  set_has_context();
  context_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.StackTrace.Element.context)
}
inline ::std::string* StackTrace_Element::mutable_context() {
  set_has_context();
  // @@protoc_insertion_point(field_mutable:common.StackTrace.Element.context)
  return context_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StackTrace_Element::release_context() {
  clear_has_context();
  return context_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StackTrace_Element::set_allocated_context(::std::string* context) {
  if (context != NULL) {
    set_has_context();
  } else {
    clear_has_context();
  }
  context_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), context);
  // @@protoc_insertion_point(field_set_allocated:common.StackTrace.Element.context)
}

// -------------------------------------------------------------------

// StackTrace

// repeated .common.StackTrace.Element element = 1;
inline int StackTrace::element_size() const {
  return element_.size();
}
inline void StackTrace::clear_element() {
  element_.Clear();
}
inline const ::container::StackTrace_Element& StackTrace::element(int index) const {
  // @@protoc_insertion_point(field_get:common.StackTrace.element)
  return element_.Get(index);
}
inline ::container::StackTrace_Element* StackTrace::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:common.StackTrace.element)
  return element_.Mutable(index);
}
inline ::container::StackTrace_Element* StackTrace::add_element() {
  // @@protoc_insertion_point(field_add:common.StackTrace.element)
  return element_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::container::StackTrace_Element >&
StackTrace::element() const {
  // @@protoc_insertion_point(field_list:common.StackTrace.element)
  return element_;
}
inline ::google::protobuf::RepeatedPtrField< ::container::StackTrace_Element >*
StackTrace::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:common.StackTrace.element)
  return &element_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace common

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_supersonic_2futils_2fexception_2fstack_5ftrace_2eproto__INCLUDED
