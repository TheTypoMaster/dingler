// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: supersonic/expression/proto/operators.proto

#ifndef PROTOBUF_supersonic_2fexpression_2fproto_2foperators_2eproto__INCLUDED
#define PROTOBUF_supersonic_2fexpression_2fproto_2foperators_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace image {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_supersonic_2fexpression_2fproto_2foperators_2eproto();
void protobuf_AssignDesc_supersonic_2fexpression_2fproto_2foperators_2eproto();
void protobuf_ShutdownFile_supersonic_2fexpression_2fproto_2foperators_2eproto();


enum OperatorId {
  OPERATOR_ADD = 0,
  OPERATOR_MULTIPLY = 4,
  OPERATOR_SUBTRACT = 8,
  OPERATOR_DIVIDE_QUIET = 13,
  OPERATOR_DIVIDE_NULLING = 14,
  OPERATOR_DIVIDE_SIGNALING = 15,
  OPERATOR_CPP_DIVIDE_QUIET = 17,
  OPERATOR_CPP_DIVIDE_NULLING = 18,
  OPERATOR_CPP_DIVIDE_SIGNALING = 19,
  OPERATOR_MODULUS_NULLING = 26,
  OPERATOR_MODULUS_SIGNALING = 27,
  OPERATOR_NEGATE = 36,
  OPERATOR_AND = 40,
  OPERATOR_OR = 44,
  OPERATOR_AND_NOT = 48,
  OPERATOR_NOT = 52,
  OPERATOR_XOR = 56,
  OPERATOR_BITWISE_AND = 60,
  OPERATOR_BITWISE_OR = 64,
  OPERATOR_BITWISE_NOT = 68,
  OPERATOR_BITWISE_XOR = 72,
  OPERATOR_SHIFT_LEFT = 76,
  OPERATOR_SHIFT_RIGHT = 80,
  OPERATOR_BITWISE_ANDNOT = 84,
  OPERATOR_EQUAL = 100,
  OPERATOR_NOT_EQUAL = 104,
  OPERATOR_LESS = 116,
  OPERATOR_LESS_OR_EQUAL = 120,
  OPERATOR_IS_ODD = 140,
  OPERATOR_IS_EVEN = 144,
  OPERATOR_IS_FINITE = 148,
  OPERATOR_IS_INF = 152,
  OPERATOR_IS_NAN = 156,
  OPERATOR_IS_NORMAL = 160,
  OPERATOR_CASE = 200,
  OPERATOR_IF = 204,
  OPERATOR_IN = 208,
  OPERATOR_IF_NULL = 220,
  OPERATOR_IS_NULL = 224,
  OPERATOR_COPY = 260,
  OPERATOR_CAST_QUIET = 265,
  OPERATOR_CAST_NULLING = 266,
  OPERATOR_CAST_SIGNALING = 267,
  OPERATOR_BOOL_TO_NUMERIC = 268,
  OPERATOR_NUMERIC_TO_BOOL = 272,
  OPERATOR_ROUND = 300,
  OPERATOR_TRUNC = 304,
  OPERATOR_CEIL_TO_INT = 308,
  OPERATOR_FLOOR_TO_INT = 312,
  OPERATOR_ROUND_TO_INT = 316,
  OPERATOR_EXP = 320,
  OPERATOR_LN_QUIET = 325,
  OPERATOR_LN_NULLING = 326,
  OPERATOR_LN_SIGNALING = 327,
  OPERATOR_LOG10_QUIET = 329,
  OPERATOR_LOG10_NULLING = 330,
  OPERATOR_LOG10_SIGNALING = 331,
  OPERATOR_SQRT_QUIET = 333,
  OPERATOR_SQRT_NULLING = 334,
  OPERATOR_SQRT_SIGNALING = 335,
  OPERATOR_LOG_QUIET = 337,
  OPERATOR_LOG_NULLING = 338,
  OPERATOR_LOG_SIGNALING = 339,
  OPERATOR_CEIL = 342,
  OPERATOR_FLOOR = 346,
  OPERATOR_POW_QUIET = 353,
  OPERATOR_POW_NULLING = 354,
  OPERATOR_POW_SIGNALING = 355,
  OPERATOR_LOG2_QUIET = 357,
  OPERATOR_LOG2_NULLING = 358,
  OPERATOR_LOG2_SIGNALING = 359,
  OPERATOR_ABS = 360,
  OPERATOR_ROUND_WITH_MULTIPLIER = 364,
  OPERATOR_LENGTH = 400,
  OPERATOR_LTRIM = 404,
  OPERATOR_RTRIM = 408,
  OPERATOR_TRIM = 412,
  OPERATOR_TOUPPER = 416,
  OPERATOR_TOLOWER = 420,
  OPERATOR_SUBSTRING_SIGNALING = 427,
  OPERATOR_CONCATENATE = 428,
  OPERATOR_TOSTRING = 432,
  OPERATOR_PARSE_STRING_QUIET = 437,
  OPERATOR_PARSE_STRING_NULLING = 438,
  OPERATOR_REGEXP_PARTIAL = 460,
  OPERATOR_REGEXP_FULL = 464,
  OPERATOR_REGEXP_EXTRACT = 468,
  OPERATOR_REGEXP_REPLACE = 472,
  OPERATOR_STRING_OFFSET = 476,
  OPERATOR_STRING_REPLACE = 480,
  OPERATOR_UNIXTIMESTAMP = 500,
  OPERATOR_FROMUNIXTIME = 504,
  OPERATOR_MAKEDATE = 508,
  OPERATOR_YEAR = 512,
  OPERATOR_MONTH = 516,
  OPERATOR_DAY = 520,
  OPERATOR_WEEKDAY = 524,
  OPERATOR_YEARDAY = 528,
  OPERATOR_HOUR = 532,
  OPERATOR_MINUTE = 536,
  OPERATOR_SECOND = 540,
  OPERATOR_MICROSECOND = 544,
  OPERATOR_QUARTER = 548,
  OPERATOR_DATE_TO_DATETIME = 552,
  OPERATOR_DATEFORMAT = 560,
  OPERATOR_ADD_DAYS = 568,
  OPERATOR_ADD_MONTHS = 576,
  OPERATOR_ADD_MINUTES = 586,
  OPERATOR_FORMAT_SIGNALING = 603,
  OPERATOR_YEAR_LOCAL = 604,
  OPERATOR_QUARTER_LOCAL = 608,
  OPERATOR_MONTH_LOCAL = 612,
  OPERATOR_DAY_LOCAL = 616,
  OPERATOR_WEEKDAY_LOCAL = 620,
  OPERATOR_YEARDAY_LOCAL = 624,
  OPERATOR_HOUR_LOCAL = 628,
  OPERATOR_MINUTE_LOCAL = 632,
  OPERATOR_DATEFORMAT_LOCAL = 644,
  OPERATOR_FINGERPRINT = 700,
  OPERATOR_HASH = 704,
  OPERATOR_SIN = 800,
  OPERATOR_COS = 804,
  OPERATOR_TAN = 808,
  OPERATOR_ASIN = 812,
  OPERATOR_ACOS = 816,
  OPERATOR_ATAN = 820,
  OPERATOR_ATAN2 = 824,
  OPERATOR_SINH = 828,
  OPERATOR_COSH = 832,
  OPERATOR_TANH = 836,
  OPERATOR_ASINH = 840,
  OPERATOR_ACOSH = 844,
  OPERATOR_ATANH = 848,
  OPERATOR_TERNARY_NO_CHECK = 1002,
  OPERATOR_TERNARY_FULL_CHECK = 1003,
  OPERATOR_TERNARY_ALLOC = 1004
};
bool OperatorId_IsValid(int value);
const OperatorId OperatorId_MIN = OPERATOR_ADD;
const OperatorId OperatorId_MAX = OPERATOR_TERNARY_ALLOC;
const int OperatorId_ARRAYSIZE = OperatorId_MAX + 1;

const ::google::protobuf::EnumDescriptor* OperatorId_descriptor();
inline const ::std::string& OperatorId_Name(OperatorId value) {
  return ::google::protobuf::internal::NameOfEnum(
    OperatorId_descriptor(), value);
}
inline bool OperatorId_Parse(
    const ::std::string& name, OperatorId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OperatorId>(
    OperatorId_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace image

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::container::OperatorId> : ::google::protobuf::internal::true_type{};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::container::OperatorId>() {
 return ::container::OperatorId_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_supersonic_2fexpression_2fproto_2foperators_2eproto__INCLUDED
