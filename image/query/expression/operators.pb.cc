// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: supersonic/expression/proto/operators.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "image/query/expression/operators.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace image {

namespace {

const ::google::protobuf::EnumDescriptor* OperatorId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_supersonic_2fexpression_2fproto_2foperators_2eproto() {
  protobuf_AddDesc_supersonic_2fexpression_2fproto_2foperators_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "supersonic/expression/proto/operators.proto");
  GOOGLE_CHECK(file != NULL);
  OperatorId_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_supersonic_2fexpression_2fproto_2foperators_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_supersonic_2fexpression_2fproto_2foperators_2eproto() {
}

void protobuf_AddDesc_supersonic_2fexpression_2fproto_2foperators_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n+supersonic/expression/proto/operators."
    "proto\022\nsupersonic*\357\032\n\nOperatorId\022\020\n\014OPER"
    "ATOR_ADD\020\000\022\025\n\021OPERATOR_MULTIPLY\020\004\022\025\n\021OPE"
    "RATOR_SUBTRACT\020\010\022\031\n\025OPERATOR_DIVIDE_QUIE"
    "T\020\r\022\033\n\027OPERATOR_DIVIDE_NULLING\020\016\022\035\n\031OPER"
    "ATOR_DIVIDE_SIGNALING\020\017\022\035\n\031OPERATOR_CPP_"
    "DIVIDE_QUIET\020\021\022\037\n\033OPERATOR_CPP_DIVIDE_NU"
    "LLING\020\022\022!\n\035OPERATOR_CPP_DIVIDE_SIGNALING"
    "\020\023\022\034\n\030OPERATOR_MODULUS_NULLING\020\032\022\036\n\032OPER"
    "ATOR_MODULUS_SIGNALING\020\033\022\023\n\017OPERATOR_NEG"
    "ATE\020$\022\020\n\014OPERATOR_AND\020(\022\017\n\013OPERATOR_OR\020,"
    "\022\024\n\020OPERATOR_AND_NOT\0200\022\020\n\014OPERATOR_NOT\0204"
    "\022\020\n\014OPERATOR_XOR\0208\022\030\n\024OPERATOR_BITWISE_A"
    "ND\020<\022\027\n\023OPERATOR_BITWISE_OR\020@\022\030\n\024OPERATO"
    "R_BITWISE_NOT\020D\022\030\n\024OPERATOR_BITWISE_XOR\020"
    "H\022\027\n\023OPERATOR_SHIFT_LEFT\020L\022\030\n\024OPERATOR_S"
    "HIFT_RIGHT\020P\022\033\n\027OPERATOR_BITWISE_ANDNOT\020"
    "T\022\022\n\016OPERATOR_EQUAL\020d\022\026\n\022OPERATOR_NOT_EQ"
    "UAL\020h\022\021\n\rOPERATOR_LESS\020t\022\032\n\026OPERATOR_LES"
    "S_OR_EQUAL\020x\022\024\n\017OPERATOR_IS_ODD\020\214\001\022\025\n\020OP"
    "ERATOR_IS_EVEN\020\220\001\022\027\n\022OPERATOR_IS_FINITE\020"
    "\224\001\022\024\n\017OPERATOR_IS_INF\020\230\001\022\024\n\017OPERATOR_IS_"
    "NAN\020\234\001\022\027\n\022OPERATOR_IS_NORMAL\020\240\001\022\022\n\rOPERA"
    "TOR_CASE\020\310\001\022\020\n\013OPERATOR_IF\020\314\001\022\020\n\013OPERATO"
    "R_IN\020\320\001\022\025\n\020OPERATOR_IF_NULL\020\334\001\022\025\n\020OPERAT"
    "OR_IS_NULL\020\340\001\022\022\n\rOPERATOR_COPY\020\204\002\022\030\n\023OPE"
    "RATOR_CAST_QUIET\020\211\002\022\032\n\025OPERATOR_CAST_NUL"
    "LING\020\212\002\022\034\n\027OPERATOR_CAST_SIGNALING\020\213\002\022\035\n"
    "\030OPERATOR_BOOL_TO_NUMERIC\020\214\002\022\035\n\030OPERATOR"
    "_NUMERIC_TO_BOOL\020\220\002\022\023\n\016OPERATOR_ROUND\020\254\002"
    "\022\023\n\016OPERATOR_TRUNC\020\260\002\022\031\n\024OPERATOR_CEIL_T"
    "O_INT\020\264\002\022\032\n\025OPERATOR_FLOOR_TO_INT\020\270\002\022\032\n\025"
    "OPERATOR_ROUND_TO_INT\020\274\002\022\021\n\014OPERATOR_EXP"
    "\020\300\002\022\026\n\021OPERATOR_LN_QUIET\020\305\002\022\030\n\023OPERATOR_"
    "LN_NULLING\020\306\002\022\032\n\025OPERATOR_LN_SIGNALING\020\307"
    "\002\022\031\n\024OPERATOR_LOG10_QUIET\020\311\002\022\033\n\026OPERATOR"
    "_LOG10_NULLING\020\312\002\022\035\n\030OPERATOR_LOG10_SIGN"
    "ALING\020\313\002\022\030\n\023OPERATOR_SQRT_QUIET\020\315\002\022\032\n\025OP"
    "ERATOR_SQRT_NULLING\020\316\002\022\034\n\027OPERATOR_SQRT_"
    "SIGNALING\020\317\002\022\027\n\022OPERATOR_LOG_QUIET\020\321\002\022\031\n"
    "\024OPERATOR_LOG_NULLING\020\322\002\022\033\n\026OPERATOR_LOG"
    "_SIGNALING\020\323\002\022\022\n\rOPERATOR_CEIL\020\326\002\022\023\n\016OPE"
    "RATOR_FLOOR\020\332\002\022\027\n\022OPERATOR_POW_QUIET\020\341\002\022"
    "\031\n\024OPERATOR_POW_NULLING\020\342\002\022\033\n\026OPERATOR_P"
    "OW_SIGNALING\020\343\002\022\030\n\023OPERATOR_LOG2_QUIET\020\345"
    "\002\022\032\n\025OPERATOR_LOG2_NULLING\020\346\002\022\034\n\027OPERATO"
    "R_LOG2_SIGNALING\020\347\002\022\021\n\014OPERATOR_ABS\020\350\002\022#"
    "\n\036OPERATOR_ROUND_WITH_MULTIPLIER\020\354\002\022\024\n\017O"
    "PERATOR_LENGTH\020\220\003\022\023\n\016OPERATOR_LTRIM\020\224\003\022\023"
    "\n\016OPERATOR_RTRIM\020\230\003\022\022\n\rOPERATOR_TRIM\020\234\003\022"
    "\025\n\020OPERATOR_TOUPPER\020\240\003\022\025\n\020OPERATOR_TOLOW"
    "ER\020\244\003\022!\n\034OPERATOR_SUBSTRING_SIGNALING\020\253\003"
    "\022\031\n\024OPERATOR_CONCATENATE\020\254\003\022\026\n\021OPERATOR_"
    "TOSTRING\020\260\003\022 \n\033OPERATOR_PARSE_STRING_QUI"
    "ET\020\265\003\022\"\n\035OPERATOR_PARSE_STRING_NULLING\020\266"
    "\003\022\034\n\027OPERATOR_REGEXP_PARTIAL\020\314\003\022\031\n\024OPERA"
    "TOR_REGEXP_FULL\020\320\003\022\034\n\027OPERATOR_REGEXP_EX"
    "TRACT\020\324\003\022\034\n\027OPERATOR_REGEXP_REPLACE\020\330\003\022\033"
    "\n\026OPERATOR_STRING_OFFSET\020\334\003\022\034\n\027OPERATOR_"
    "STRING_REPLACE\020\340\003\022\033\n\026OPERATOR_UNIXTIMEST"
    "AMP\020\364\003\022\032\n\025OPERATOR_FROMUNIXTIME\020\370\003\022\026\n\021OP"
    "ERATOR_MAKEDATE\020\374\003\022\022\n\rOPERATOR_YEAR\020\200\004\022\023"
    "\n\016OPERATOR_MONTH\020\204\004\022\021\n\014OPERATOR_DAY\020\210\004\022\025"
    "\n\020OPERATOR_WEEKDAY\020\214\004\022\025\n\020OPERATOR_YEARDA"
    "Y\020\220\004\022\022\n\rOPERATOR_HOUR\020\224\004\022\024\n\017OPERATOR_MIN"
    "UTE\020\230\004\022\024\n\017OPERATOR_SECOND\020\234\004\022\031\n\024OPERATOR"
    "_MICROSECOND\020\240\004\022\025\n\020OPERATOR_QUARTER\020\244\004\022\036"
    "\n\031OPERATOR_DATE_TO_DATETIME\020\250\004\022\030\n\023OPERAT"
    "OR_DATEFORMAT\020\260\004\022\026\n\021OPERATOR_ADD_DAYS\020\270\004"
    "\022\030\n\023OPERATOR_ADD_MONTHS\020\300\004\022\031\n\024OPERATOR_A"
    "DD_MINUTES\020\312\004\022\036\n\031OPERATOR_FORMAT_SIGNALI"
    "NG\020\333\004\022\030\n\023OPERATOR_YEAR_LOCAL\020\334\004\022\033\n\026OPERA"
    "TOR_QUARTER_LOCAL\020\340\004\022\031\n\024OPERATOR_MONTH_L"
    "OCAL\020\344\004\022\027\n\022OPERATOR_DAY_LOCAL\020\350\004\022\033\n\026OPER"
    "ATOR_WEEKDAY_LOCAL\020\354\004\022\033\n\026OPERATOR_YEARDA"
    "Y_LOCAL\020\360\004\022\030\n\023OPERATOR_HOUR_LOCAL\020\364\004\022\032\n\025"
    "OPERATOR_MINUTE_LOCAL\020\370\004\022\036\n\031OPERATOR_DAT"
    "EFORMAT_LOCAL\020\204\005\022\031\n\024OPERATOR_FINGERPRINT"
    "\020\274\005\022\022\n\rOPERATOR_HASH\020\300\005\022\021\n\014OPERATOR_SIN\020"
    "\240\006\022\021\n\014OPERATOR_COS\020\244\006\022\021\n\014OPERATOR_TAN\020\250\006"
    "\022\022\n\rOPERATOR_ASIN\020\254\006\022\022\n\rOPERATOR_ACOS\020\260\006"
    "\022\022\n\rOPERATOR_ATAN\020\264\006\022\023\n\016OPERATOR_ATAN2\020\270"
    "\006\022\022\n\rOPERATOR_SINH\020\274\006\022\022\n\rOPERATOR_COSH\020\300"
    "\006\022\022\n\rOPERATOR_TANH\020\304\006\022\023\n\016OPERATOR_ASINH\020"
    "\310\006\022\023\n\016OPERATOR_ACOSH\020\314\006\022\023\n\016OPERATOR_ATAN"
    "H\020\320\006\022\036\n\031OPERATOR_TERNARY_NO_CHECK\020\352\007\022 \n\033"
    "OPERATOR_TERNARY_FULL_CHECK\020\353\007\022\033\n\026OPERAT"
    "OR_TERNARY_ALLOC\020\354\007", 3499);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "supersonic/expression/proto/operators.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_supersonic_2fexpression_2fproto_2foperators_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_supersonic_2fexpression_2fproto_2foperators_2eproto {
  StaticDescriptorInitializer_supersonic_2fexpression_2fproto_2foperators_2eproto() {
    protobuf_AddDesc_supersonic_2fexpression_2fproto_2foperators_2eproto();
  }
} static_descriptor_initializer_supersonic_2fexpression_2fproto_2foperators_2eproto_;
const ::google::protobuf::EnumDescriptor* OperatorId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperatorId_descriptor_;
}
bool OperatorId_IsValid(int value) {
  switch(value) {
    case 0:
    case 4:
    case 8:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 26:
    case 27:
    case 36:
    case 40:
    case 44:
    case 48:
    case 52:
    case 56:
    case 60:
    case 64:
    case 68:
    case 72:
    case 76:
    case 80:
    case 84:
    case 100:
    case 104:
    case 116:
    case 120:
    case 140:
    case 144:
    case 148:
    case 152:
    case 156:
    case 160:
    case 200:
    case 204:
    case 208:
    case 220:
    case 224:
    case 260:
    case 265:
    case 266:
    case 267:
    case 268:
    case 272:
    case 300:
    case 304:
    case 308:
    case 312:
    case 316:
    case 320:
    case 325:
    case 326:
    case 327:
    case 329:
    case 330:
    case 331:
    case 333:
    case 334:
    case 335:
    case 337:
    case 338:
    case 339:
    case 342:
    case 346:
    case 353:
    case 354:
    case 355:
    case 357:
    case 358:
    case 359:
    case 360:
    case 364:
    case 400:
    case 404:
    case 408:
    case 412:
    case 416:
    case 420:
    case 427:
    case 428:
    case 432:
    case 437:
    case 438:
    case 460:
    case 464:
    case 468:
    case 472:
    case 476:
    case 480:
    case 500:
    case 504:
    case 508:
    case 512:
    case 516:
    case 520:
    case 524:
    case 528:
    case 532:
    case 536:
    case 540:
    case 544:
    case 548:
    case 552:
    case 560:
    case 568:
    case 576:
    case 586:
    case 603:
    case 604:
    case 608:
    case 612:
    case 616:
    case 620:
    case 624:
    case 628:
    case 632:
    case 644:
    case 700:
    case 704:
    case 800:
    case 804:
    case 808:
    case 812:
    case 816:
    case 820:
    case 824:
    case 828:
    case 832:
    case 836:
    case 840:
    case 844:
    case 848:
    case 1002:
    case 1003:
    case 1004:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace image

// @@protoc_insertion_point(global_scope)
